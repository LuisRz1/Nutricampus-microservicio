name: Deploy to EC2

on:
  push:
    branches:
      - despliegue_docker_v2


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build -t luisrz/micro_dieta .
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push luisrz/micro_dieta

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Launch EC2 Instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          AWS_KEY_NAME: ${{ secrets.AWS_KEY_NAME }}
          AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
          AWS_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-06c68f701d8090592 \
            --instance-type t2.micro \
            --key-name $AWS_KEY_NAME \
            --security-group-ids $AWS_SECURITY_GROUP \
            --subnet-id $AWS_SUBNET_ID \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=github-action-instance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Get EC2 Public IP
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          INSTANCE_ID: ${{ env.INSTANCE_ID }}
        run: |
          while true; do
            PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            if [ "$PUBLIC_IP" != "None" ]; then
              echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
              break
            fi
            sleep 10
          done

      - name: Wait for EC2 to be ready
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          INSTANCE_ID: ${{ env.INSTANCE_ID }}
        run: |
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID

      - name: Deploy to EC2
        env:
          EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ec2-user@${{ env.EC2_PUBLIC_IP }}:/home/ec2-user/
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF
